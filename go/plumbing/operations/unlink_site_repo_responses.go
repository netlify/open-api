// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/open-api/v2/go/models"
)

// UnlinkSiteRepoReader is a Reader for the UnlinkSiteRepo structure.
type UnlinkSiteRepoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlinkSiteRepoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnlinkSiteRepoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUnlinkSiteRepoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnlinkSiteRepoOK creates a UnlinkSiteRepoOK with default headers values
func NewUnlinkSiteRepoOK() *UnlinkSiteRepoOK {
	return &UnlinkSiteRepoOK{}
}

/*UnlinkSiteRepoOK handles this case with default header values.

OK
*/
type UnlinkSiteRepoOK struct {
	Payload *models.Site
}

func (o *UnlinkSiteRepoOK) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/unlink_repo][%d] unlinkSiteRepoOK  %+v", 200, o.Payload)
}

func (o *UnlinkSiteRepoOK) GetPayload() *models.Site {
	return o.Payload
}

func (o *UnlinkSiteRepoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Site)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkSiteRepoNotFound creates a UnlinkSiteRepoNotFound with default headers values
func NewUnlinkSiteRepoNotFound() *UnlinkSiteRepoNotFound {
	return &UnlinkSiteRepoNotFound{}
}

/*UnlinkSiteRepoNotFound handles this case with default header values.

Site not found
*/
type UnlinkSiteRepoNotFound struct {
}

func (o *UnlinkSiteRepoNotFound) Error() string {
	return fmt.Sprintf("[PUT /sites/{site_id}/unlink_repo][%d] unlinkSiteRepoNotFound ", 404)
}

func (o *UnlinkSiteRepoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
