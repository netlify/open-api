// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAgentRunnersParams creates a new ListAgentRunnersParams object
// with the default values initialized.
func NewListAgentRunnersParams() *ListAgentRunnersParams {
	var ()
	return &ListAgentRunnersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAgentRunnersParamsWithTimeout creates a new ListAgentRunnersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAgentRunnersParamsWithTimeout(timeout time.Duration) *ListAgentRunnersParams {
	var ()
	return &ListAgentRunnersParams{

		timeout: timeout,
	}
}

// NewListAgentRunnersParamsWithContext creates a new ListAgentRunnersParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAgentRunnersParamsWithContext(ctx context.Context) *ListAgentRunnersParams {
	var ()
	return &ListAgentRunnersParams{

		Context: ctx,
	}
}

// NewListAgentRunnersParamsWithHTTPClient creates a new ListAgentRunnersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAgentRunnersParamsWithHTTPClient(client *http.Client) *ListAgentRunnersParams {
	var ()
	return &ListAgentRunnersParams{
		HTTPClient: client,
	}
}

/*
ListAgentRunnersParams contains all the parameters to send to the API endpoint
for the list agent runners operation typically these are written to a http.Request
*/
type ListAgentRunnersParams struct {

	/*AccountID*/
	AccountID string
	/*Branch*/
	Branch *string
	/*From*/
	From *int64
	/*Page*/
	Page *int32
	/*PerPage*/
	PerPage *int32
	/*ResultBranch*/
	ResultBranch *string
	/*SiteID*/
	SiteID string
	/*State*/
	State *string
	/*Title*/
	Title *string
	/*To*/
	To *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list agent runners params
func (o *ListAgentRunnersParams) WithTimeout(timeout time.Duration) *ListAgentRunnersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list agent runners params
func (o *ListAgentRunnersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list agent runners params
func (o *ListAgentRunnersParams) WithContext(ctx context.Context) *ListAgentRunnersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list agent runners params
func (o *ListAgentRunnersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list agent runners params
func (o *ListAgentRunnersParams) WithHTTPClient(client *http.Client) *ListAgentRunnersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list agent runners params
func (o *ListAgentRunnersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the list agent runners params
func (o *ListAgentRunnersParams) WithAccountID(accountID string) *ListAgentRunnersParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the list agent runners params
func (o *ListAgentRunnersParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithBranch adds the branch to the list agent runners params
func (o *ListAgentRunnersParams) WithBranch(branch *string) *ListAgentRunnersParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the list agent runners params
func (o *ListAgentRunnersParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithFrom adds the from to the list agent runners params
func (o *ListAgentRunnersParams) WithFrom(from *int64) *ListAgentRunnersParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the list agent runners params
func (o *ListAgentRunnersParams) SetFrom(from *int64) {
	o.From = from
}

// WithPage adds the page to the list agent runners params
func (o *ListAgentRunnersParams) WithPage(page *int32) *ListAgentRunnersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list agent runners params
func (o *ListAgentRunnersParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list agent runners params
func (o *ListAgentRunnersParams) WithPerPage(perPage *int32) *ListAgentRunnersParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list agent runners params
func (o *ListAgentRunnersParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithResultBranch adds the resultBranch to the list agent runners params
func (o *ListAgentRunnersParams) WithResultBranch(resultBranch *string) *ListAgentRunnersParams {
	o.SetResultBranch(resultBranch)
	return o
}

// SetResultBranch adds the resultBranch to the list agent runners params
func (o *ListAgentRunnersParams) SetResultBranch(resultBranch *string) {
	o.ResultBranch = resultBranch
}

// WithSiteID adds the siteID to the list agent runners params
func (o *ListAgentRunnersParams) WithSiteID(siteID string) *ListAgentRunnersParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the list agent runners params
func (o *ListAgentRunnersParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithState adds the state to the list agent runners params
func (o *ListAgentRunnersParams) WithState(state *string) *ListAgentRunnersParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list agent runners params
func (o *ListAgentRunnersParams) SetState(state *string) {
	o.State = state
}

// WithTitle adds the title to the list agent runners params
func (o *ListAgentRunnersParams) WithTitle(title *string) *ListAgentRunnersParams {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the list agent runners params
func (o *ListAgentRunnersParams) SetTitle(title *string) {
	o.Title = title
}

// WithTo adds the to to the list agent runners params
func (o *ListAgentRunnersParams) WithTo(to *int64) *ListAgentRunnersParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the list agent runners params
func (o *ListAgentRunnersParams) SetTo(to *int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *ListAgentRunnersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account_id
	qrAccountID := o.AccountID
	qAccountID := qrAccountID
	if qAccountID != "" {
		if err := r.SetQueryParam("account_id", qAccountID); err != nil {
			return err
		}
	}

	if o.Branch != nil {

		// query param branch
		var qrBranch string
		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {
			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.ResultBranch != nil {

		// query param result_branch
		var qrResultBranch string
		if o.ResultBranch != nil {
			qrResultBranch = *o.ResultBranch
		}
		qResultBranch := qrResultBranch
		if qResultBranch != "" {
			if err := r.SetQueryParam("result_branch", qResultBranch); err != nil {
				return err
			}
		}

	}

	// query param site_id
	qrSiteID := o.SiteID
	qSiteID := qrSiteID
	if qSiteID != "" {
		if err := r.SetQueryParam("site_id", qSiteID); err != nil {
			return err
		}
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.Title != nil {

		// query param title
		var qrTitle string
		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {
			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo int64
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
