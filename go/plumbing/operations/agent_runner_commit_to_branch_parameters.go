// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAgentRunnerCommitToBranchParams creates a new AgentRunnerCommitToBranchParams object
// with the default values initialized.
func NewAgentRunnerCommitToBranchParams() *AgentRunnerCommitToBranchParams {
	var ()
	return &AgentRunnerCommitToBranchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAgentRunnerCommitToBranchParamsWithTimeout creates a new AgentRunnerCommitToBranchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAgentRunnerCommitToBranchParamsWithTimeout(timeout time.Duration) *AgentRunnerCommitToBranchParams {
	var ()
	return &AgentRunnerCommitToBranchParams{

		timeout: timeout,
	}
}

// NewAgentRunnerCommitToBranchParamsWithContext creates a new AgentRunnerCommitToBranchParams object
// with the default values initialized, and the ability to set a context for a request
func NewAgentRunnerCommitToBranchParamsWithContext(ctx context.Context) *AgentRunnerCommitToBranchParams {
	var ()
	return &AgentRunnerCommitToBranchParams{

		Context: ctx,
	}
}

// NewAgentRunnerCommitToBranchParamsWithHTTPClient creates a new AgentRunnerCommitToBranchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAgentRunnerCommitToBranchParamsWithHTTPClient(client *http.Client) *AgentRunnerCommitToBranchParams {
	var ()
	return &AgentRunnerCommitToBranchParams{
		HTTPClient: client,
	}
}

/*
AgentRunnerCommitToBranchParams contains all the parameters to send to the API endpoint
for the agent runner commit to branch operation typically these are written to a http.Request
*/
type AgentRunnerCommitToBranchParams struct {

	/*AgentRunnerID*/
	AgentRunnerID string
	/*TargetBranch*/
	TargetBranch string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) WithTimeout(timeout time.Duration) *AgentRunnerCommitToBranchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) WithContext(ctx context.Context) *AgentRunnerCommitToBranchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) WithHTTPClient(client *http.Client) *AgentRunnerCommitToBranchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentRunnerID adds the agentRunnerID to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) WithAgentRunnerID(agentRunnerID string) *AgentRunnerCommitToBranchParams {
	o.SetAgentRunnerID(agentRunnerID)
	return o
}

// SetAgentRunnerID adds the agentRunnerId to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) SetAgentRunnerID(agentRunnerID string) {
	o.AgentRunnerID = agentRunnerID
}

// WithTargetBranch adds the targetBranch to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) WithTargetBranch(targetBranch string) *AgentRunnerCommitToBranchParams {
	o.SetTargetBranch(targetBranch)
	return o
}

// SetTargetBranch adds the targetBranch to the agent runner commit to branch params
func (o *AgentRunnerCommitToBranchParams) SetTargetBranch(targetBranch string) {
	o.TargetBranch = targetBranch
}

// WriteToRequest writes these params to a swagger request
func (o *AgentRunnerCommitToBranchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param agent_runner_id
	if err := r.SetPathParam("agent_runner_id", o.AgentRunnerID); err != nil {
		return err
	}

	// query param target_branch
	qrTargetBranch := o.TargetBranch
	qTargetBranch := qrTargetBranch
	if qTargetBranch != "" {
		if err := r.SetQueryParam("target_branch", qTargetBranch); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
