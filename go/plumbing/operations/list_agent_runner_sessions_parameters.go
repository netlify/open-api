// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAgentRunnerSessionsParams creates a new ListAgentRunnerSessionsParams object
// with the default values initialized.
func NewListAgentRunnerSessionsParams() *ListAgentRunnerSessionsParams {
	var ()
	return &ListAgentRunnerSessionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAgentRunnerSessionsParamsWithTimeout creates a new ListAgentRunnerSessionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAgentRunnerSessionsParamsWithTimeout(timeout time.Duration) *ListAgentRunnerSessionsParams {
	var ()
	return &ListAgentRunnerSessionsParams{

		timeout: timeout,
	}
}

// NewListAgentRunnerSessionsParamsWithContext creates a new ListAgentRunnerSessionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAgentRunnerSessionsParamsWithContext(ctx context.Context) *ListAgentRunnerSessionsParams {
	var ()
	return &ListAgentRunnerSessionsParams{

		Context: ctx,
	}
}

// NewListAgentRunnerSessionsParamsWithHTTPClient creates a new ListAgentRunnerSessionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAgentRunnerSessionsParamsWithHTTPClient(client *http.Client) *ListAgentRunnerSessionsParams {
	var ()
	return &ListAgentRunnerSessionsParams{
		HTTPClient: client,
	}
}

/*
ListAgentRunnerSessionsParams contains all the parameters to send to the API endpoint
for the list agent runner sessions operation typically these are written to a http.Request
*/
type ListAgentRunnerSessionsParams struct {

	/*AgentRunnerID*/
	AgentRunnerID string
	/*From*/
	From *int64
	/*OrderBy*/
	OrderBy *string
	/*Page*/
	Page *int32
	/*PerPage*/
	PerPage *int32
	/*State*/
	State *string
	/*To*/
	To *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithTimeout(timeout time.Duration) *ListAgentRunnerSessionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithContext(ctx context.Context) *ListAgentRunnerSessionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithHTTPClient(client *http.Client) *ListAgentRunnerSessionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgentRunnerID adds the agentRunnerID to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithAgentRunnerID(agentRunnerID string) *ListAgentRunnerSessionsParams {
	o.SetAgentRunnerID(agentRunnerID)
	return o
}

// SetAgentRunnerID adds the agentRunnerId to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetAgentRunnerID(agentRunnerID string) {
	o.AgentRunnerID = agentRunnerID
}

// WithFrom adds the from to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithFrom(from *int64) *ListAgentRunnerSessionsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetFrom(from *int64) {
	o.From = from
}

// WithOrderBy adds the orderBy to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithOrderBy(orderBy *string) *ListAgentRunnerSessionsParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPage adds the page to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithPage(page *int32) *ListAgentRunnerSessionsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithPerPage(perPage *int32) *ListAgentRunnerSessionsParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithState adds the state to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithState(state *string) *ListAgentRunnerSessionsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetState(state *string) {
	o.State = state
}

// WithTo adds the to to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) WithTo(to *int64) *ListAgentRunnerSessionsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the list agent runner sessions params
func (o *ListAgentRunnerSessionsParams) SetTo(to *int64) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *ListAgentRunnerSessionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param agent_runner_id
	if err := r.SetPathParam("agent_runner_id", o.AgentRunnerID); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string
		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {
			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32
		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {
			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo int64
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := swag.FormatInt64(qrTo)
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
