// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAccountMemberParams creates a new GetAccountMemberParams object
// with the default values initialized.
func NewGetAccountMemberParams() *GetAccountMemberParams {
	var ()
	return &GetAccountMemberParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountMemberParamsWithTimeout creates a new GetAccountMemberParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountMemberParamsWithTimeout(timeout time.Duration) *GetAccountMemberParams {
	var ()
	return &GetAccountMemberParams{

		timeout: timeout,
	}
}

// NewGetAccountMemberParamsWithContext creates a new GetAccountMemberParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountMemberParamsWithContext(ctx context.Context) *GetAccountMemberParams {
	var ()
	return &GetAccountMemberParams{

		Context: ctx,
	}
}

// NewGetAccountMemberParamsWithHTTPClient creates a new GetAccountMemberParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountMemberParamsWithHTTPClient(client *http.Client) *GetAccountMemberParams {
	var ()
	return &GetAccountMemberParams{
		HTTPClient: client,
	}
}

/*
GetAccountMemberParams contains all the parameters to send to the API endpoint
for the get account member operation typically these are written to a http.Request
*/
type GetAccountMemberParams struct {

	/*AccountSlug*/
	AccountSlug string
	/*MemberID*/
	MemberID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get account member params
func (o *GetAccountMemberParams) WithTimeout(timeout time.Duration) *GetAccountMemberParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get account member params
func (o *GetAccountMemberParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get account member params
func (o *GetAccountMemberParams) WithContext(ctx context.Context) *GetAccountMemberParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get account member params
func (o *GetAccountMemberParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get account member params
func (o *GetAccountMemberParams) WithHTTPClient(client *http.Client) *GetAccountMemberParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get account member params
func (o *GetAccountMemberParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountSlug adds the accountSlug to the get account member params
func (o *GetAccountMemberParams) WithAccountSlug(accountSlug string) *GetAccountMemberParams {
	o.SetAccountSlug(accountSlug)
	return o
}

// SetAccountSlug adds the accountSlug to the get account member params
func (o *GetAccountMemberParams) SetAccountSlug(accountSlug string) {
	o.AccountSlug = accountSlug
}

// WithMemberID adds the memberID to the get account member params
func (o *GetAccountMemberParams) WithMemberID(memberID string) *GetAccountMemberParams {
	o.SetMemberID(memberID)
	return o
}

// SetMemberID adds the memberId to the get account member params
func (o *GetAccountMemberParams) SetMemberID(memberID string) {
	o.MemberID = memberID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountMemberParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param account_slug
	if err := r.SetPathParam("account_slug", o.AccountSlug); err != nil {
		return err
	}

	// path param member_id
	if err := r.SetPathParam("member_id", o.MemberID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
