// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteHookParams creates a new DeleteHookParams object
// with the default values initialized.
func NewDeleteHookParams() *DeleteHookParams {
	var ()
	return &DeleteHookParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteHookParamsWithTimeout creates a new DeleteHookParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteHookParamsWithTimeout(timeout time.Duration) *DeleteHookParams {
	var ()
	return &DeleteHookParams{

		timeout: timeout,
	}
}

// NewDeleteHookParamsWithContext creates a new DeleteHookParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteHookParamsWithContext(ctx context.Context) *DeleteHookParams {
	var ()
	return &DeleteHookParams{

		Context: ctx,
	}
}

// NewDeleteHookParamsWithHTTPClient creates a new DeleteHookParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteHookParamsWithHTTPClient(client *http.Client) *DeleteHookParams {
	var ()
	return &DeleteHookParams{
		HTTPClient: client,
	}
}

/*DeleteHookParams contains all the parameters to send to the API endpoint
for the delete hook operation typically these are written to a http.Request
*/
type DeleteHookParams struct {

	/*HookID*/
	HookID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete hook params
func (o *DeleteHookParams) WithTimeout(timeout time.Duration) *DeleteHookParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete hook params
func (o *DeleteHookParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete hook params
func (o *DeleteHookParams) WithContext(ctx context.Context) *DeleteHookParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete hook params
func (o *DeleteHookParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete hook params
func (o *DeleteHookParams) WithHTTPClient(client *http.Client) *DeleteHookParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete hook params
func (o *DeleteHookParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHookID adds the hookID to the delete hook params
func (o *DeleteHookParams) WithHookID(hookID string) *DeleteHookParams {
	o.SetHookID(hookID)
	return o
}

// SetHookID adds the hookId to the delete hook params
func (o *DeleteHookParams) SetHookID(hookID string) {
	o.HookID = hookID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteHookParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param hook_id
	if err := r.SetPathParam("hook_id", o.HookID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
