// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateAgentRunnerSessionParams creates a new CreateAgentRunnerSessionParams object
// with the default values initialized.
func NewCreateAgentRunnerSessionParams() *CreateAgentRunnerSessionParams {
	var ()
	return &CreateAgentRunnerSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateAgentRunnerSessionParamsWithTimeout creates a new CreateAgentRunnerSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateAgentRunnerSessionParamsWithTimeout(timeout time.Duration) *CreateAgentRunnerSessionParams {
	var ()
	return &CreateAgentRunnerSessionParams{

		timeout: timeout,
	}
}

// NewCreateAgentRunnerSessionParamsWithContext creates a new CreateAgentRunnerSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateAgentRunnerSessionParamsWithContext(ctx context.Context) *CreateAgentRunnerSessionParams {
	var ()
	return &CreateAgentRunnerSessionParams{

		Context: ctx,
	}
}

// NewCreateAgentRunnerSessionParamsWithHTTPClient creates a new CreateAgentRunnerSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateAgentRunnerSessionParamsWithHTTPClient(client *http.Client) *CreateAgentRunnerSessionParams {
	var ()
	return &CreateAgentRunnerSessionParams{
		HTTPClient: client,
	}
}

/*
CreateAgentRunnerSessionParams contains all the parameters to send to the API endpoint
for the create agent runner session operation typically these are written to a http.Request
*/
type CreateAgentRunnerSessionParams struct {

	/*Agent*/
	Agent *string
	/*AgentRunnerID*/
	AgentRunnerID string
	/*FileKeys*/
	FileKeys []string
	/*Model*/
	Model *string
	/*Prompt*/
	Prompt *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithTimeout(timeout time.Duration) *CreateAgentRunnerSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithContext(ctx context.Context) *CreateAgentRunnerSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithHTTPClient(client *http.Client) *CreateAgentRunnerSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgent adds the agent to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithAgent(agent *string) *CreateAgentRunnerSessionParams {
	o.SetAgent(agent)
	return o
}

// SetAgent adds the agent to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetAgent(agent *string) {
	o.Agent = agent
}

// WithAgentRunnerID adds the agentRunnerID to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithAgentRunnerID(agentRunnerID string) *CreateAgentRunnerSessionParams {
	o.SetAgentRunnerID(agentRunnerID)
	return o
}

// SetAgentRunnerID adds the agentRunnerId to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetAgentRunnerID(agentRunnerID string) {
	o.AgentRunnerID = agentRunnerID
}

// WithFileKeys adds the fileKeys to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithFileKeys(fileKeys []string) *CreateAgentRunnerSessionParams {
	o.SetFileKeys(fileKeys)
	return o
}

// SetFileKeys adds the fileKeys to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetFileKeys(fileKeys []string) {
	o.FileKeys = fileKeys
}

// WithModel adds the model to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithModel(model *string) *CreateAgentRunnerSessionParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetModel(model *string) {
	o.Model = model
}

// WithPrompt adds the prompt to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) WithPrompt(prompt *string) *CreateAgentRunnerSessionParams {
	o.SetPrompt(prompt)
	return o
}

// SetPrompt adds the prompt to the create agent runner session params
func (o *CreateAgentRunnerSessionParams) SetPrompt(prompt *string) {
	o.Prompt = prompt
}

// WriteToRequest writes these params to a swagger request
func (o *CreateAgentRunnerSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Agent != nil {

		// query param agent
		var qrAgent string
		if o.Agent != nil {
			qrAgent = *o.Agent
		}
		qAgent := qrAgent
		if qAgent != "" {
			if err := r.SetQueryParam("agent", qAgent); err != nil {
				return err
			}
		}

	}

	// path param agent_runner_id
	if err := r.SetPathParam("agent_runner_id", o.AgentRunnerID); err != nil {
		return err
	}

	valuesFileKeys := o.FileKeys

	joinedFileKeys := swag.JoinByFormat(valuesFileKeys, "")
	// query array param file_keys
	if err := r.SetQueryParam("file_keys", joinedFileKeys...); err != nil {
		return err
	}

	if o.Model != nil {

		// query param model
		var qrModel string
		if o.Model != nil {
			qrModel = *o.Model
		}
		qModel := qrModel
		if qModel != "" {
			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}

	}

	if o.Prompt != nil {

		// query param prompt
		var qrPrompt string
		if o.Prompt != nil {
			qrPrompt = *o.Prompt
		}
		qPrompt := qrPrompt
		if qPrompt != "" {
			if err := r.SetQueryParam("prompt", qPrompt); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
