// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/open-api/v2/go/models"
)

// AgentRunnerCommitToBranchReader is a Reader for the AgentRunnerCommitToBranch structure.
type AgentRunnerCommitToBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AgentRunnerCommitToBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAgentRunnerCommitToBranchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAgentRunnerCommitToBranchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAgentRunnerCommitToBranchConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAgentRunnerCommitToBranchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAgentRunnerCommitToBranchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAgentRunnerCommitToBranchOK creates a AgentRunnerCommitToBranchOK with default headers values
func NewAgentRunnerCommitToBranchOK() *AgentRunnerCommitToBranchOK {
	return &AgentRunnerCommitToBranchOK{}
}

/*
AgentRunnerCommitToBranchOK handles this case with default header values.

OK
*/
type AgentRunnerCommitToBranchOK struct {
}

func (o *AgentRunnerCommitToBranchOK) Error() string {
	return fmt.Sprintf("[POST /agent_runners/{agent_runner_id}/commit][%d] agentRunnerCommitToBranchOK ", 200)
}

func (o *AgentRunnerCommitToBranchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAgentRunnerCommitToBranchBadRequest creates a AgentRunnerCommitToBranchBadRequest with default headers values
func NewAgentRunnerCommitToBranchBadRequest() *AgentRunnerCommitToBranchBadRequest {
	return &AgentRunnerCommitToBranchBadRequest{}
}

/*
AgentRunnerCommitToBranchBadRequest handles this case with default header values.

Bad Request
*/
type AgentRunnerCommitToBranchBadRequest struct {
}

func (o *AgentRunnerCommitToBranchBadRequest) Error() string {
	return fmt.Sprintf("[POST /agent_runners/{agent_runner_id}/commit][%d] agentRunnerCommitToBranchBadRequest ", 400)
}

func (o *AgentRunnerCommitToBranchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAgentRunnerCommitToBranchConflict creates a AgentRunnerCommitToBranchConflict with default headers values
func NewAgentRunnerCommitToBranchConflict() *AgentRunnerCommitToBranchConflict {
	return &AgentRunnerCommitToBranchConflict{}
}

/*
AgentRunnerCommitToBranchConflict handles this case with default header values.

Conflict
*/
type AgentRunnerCommitToBranchConflict struct {
}

func (o *AgentRunnerCommitToBranchConflict) Error() string {
	return fmt.Sprintf("[POST /agent_runners/{agent_runner_id}/commit][%d] agentRunnerCommitToBranchConflict ", 409)
}

func (o *AgentRunnerCommitToBranchConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAgentRunnerCommitToBranchUnprocessableEntity creates a AgentRunnerCommitToBranchUnprocessableEntity with default headers values
func NewAgentRunnerCommitToBranchUnprocessableEntity() *AgentRunnerCommitToBranchUnprocessableEntity {
	return &AgentRunnerCommitToBranchUnprocessableEntity{}
}

/*
AgentRunnerCommitToBranchUnprocessableEntity handles this case with default header values.

Unprocessable Entity
*/
type AgentRunnerCommitToBranchUnprocessableEntity struct {
}

func (o *AgentRunnerCommitToBranchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /agent_runners/{agent_runner_id}/commit][%d] agentRunnerCommitToBranchUnprocessableEntity ", 422)
}

func (o *AgentRunnerCommitToBranchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAgentRunnerCommitToBranchDefault creates a AgentRunnerCommitToBranchDefault with default headers values
func NewAgentRunnerCommitToBranchDefault(code int) *AgentRunnerCommitToBranchDefault {
	return &AgentRunnerCommitToBranchDefault{
		_statusCode: code,
	}
}

/*
AgentRunnerCommitToBranchDefault handles this case with default header values.

error
*/
type AgentRunnerCommitToBranchDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the agent runner commit to branch default response
func (o *AgentRunnerCommitToBranchDefault) Code() int {
	return o._statusCode
}

func (o *AgentRunnerCommitToBranchDefault) Error() string {
	return fmt.Sprintf("[POST /agent_runners/{agent_runner_id}/commit][%d] agentRunnerCommitToBranch default  %+v", o._statusCode, o.Payload)
}

func (o *AgentRunnerCommitToBranchDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *AgentRunnerCommitToBranchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
