// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTransferDNSZoneParams creates a new TransferDNSZoneParams object
// with the default values initialized.
func NewTransferDNSZoneParams() *TransferDNSZoneParams {
	var ()
	return &TransferDNSZoneParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTransferDNSZoneParamsWithTimeout creates a new TransferDNSZoneParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTransferDNSZoneParamsWithTimeout(timeout time.Duration) *TransferDNSZoneParams {
	var ()
	return &TransferDNSZoneParams{

		timeout: timeout,
	}
}

// NewTransferDNSZoneParamsWithContext creates a new TransferDNSZoneParams object
// with the default values initialized, and the ability to set a context for a request
func NewTransferDNSZoneParamsWithContext(ctx context.Context) *TransferDNSZoneParams {
	var ()
	return &TransferDNSZoneParams{

		Context: ctx,
	}
}

// NewTransferDNSZoneParamsWithHTTPClient creates a new TransferDNSZoneParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTransferDNSZoneParamsWithHTTPClient(client *http.Client) *TransferDNSZoneParams {
	var ()
	return &TransferDNSZoneParams{
		HTTPClient: client,
	}
}

/*TransferDNSZoneParams contains all the parameters to send to the API endpoint
for the transfer Dns zone operation typically these are written to a http.Request
*/
type TransferDNSZoneParams struct {

	/*AccountID
	  the account of the dns zone

	*/
	AccountID string
	/*TransferAccountID
	  the account you want to transfer the dns zone to

	*/
	TransferAccountID string
	/*TransferUserID
	  the user you want to transfer the dns zone to

	*/
	TransferUserID string
	/*ZoneID*/
	ZoneID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithTimeout(timeout time.Duration) *TransferDNSZoneParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithContext(ctx context.Context) *TransferDNSZoneParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithHTTPClient(client *http.Client) *TransferDNSZoneParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithAccountID(accountID string) *TransferDNSZoneParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithTransferAccountID adds the transferAccountID to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithTransferAccountID(transferAccountID string) *TransferDNSZoneParams {
	o.SetTransferAccountID(transferAccountID)
	return o
}

// SetTransferAccountID adds the transferAccountId to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetTransferAccountID(transferAccountID string) {
	o.TransferAccountID = transferAccountID
}

// WithTransferUserID adds the transferUserID to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithTransferUserID(transferUserID string) *TransferDNSZoneParams {
	o.SetTransferUserID(transferUserID)
	return o
}

// SetTransferUserID adds the transferUserId to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetTransferUserID(transferUserID string) {
	o.TransferUserID = transferUserID
}

// WithZoneID adds the zoneID to the transfer Dns zone params
func (o *TransferDNSZoneParams) WithZoneID(zoneID string) *TransferDNSZoneParams {
	o.SetZoneID(zoneID)
	return o
}

// SetZoneID adds the zoneId to the transfer Dns zone params
func (o *TransferDNSZoneParams) SetZoneID(zoneID string) {
	o.ZoneID = zoneID
}

// WriteToRequest writes these params to a swagger request
func (o *TransferDNSZoneParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account_id
	qrAccountID := o.AccountID
	qAccountID := qrAccountID
	if qAccountID != "" {
		if err := r.SetQueryParam("account_id", qAccountID); err != nil {
			return err
		}
	}

	// query param transfer_account_id
	qrTransferAccountID := o.TransferAccountID
	qTransferAccountID := qrTransferAccountID
	if qTransferAccountID != "" {
		if err := r.SetQueryParam("transfer_account_id", qTransferAccountID); err != nil {
			return err
		}
	}

	// query param transfer_user_id
	qrTransferUserID := o.TransferUserID
	qTransferUserID := qrTransferUserID
	if qTransferUserID != "" {
		if err := r.SetQueryParam("transfer_user_id", qTransferUserID); err != nil {
			return err
		}
	}

	// path param zone_id
	if err := r.SetPathParam("zone_id", o.ZoneID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
