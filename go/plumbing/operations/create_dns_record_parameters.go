// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/open-api/v2/go/models"
)

// NewCreateDNSRecordParams creates a new CreateDNSRecordParams object
// with the default values initialized.
func NewCreateDNSRecordParams() *CreateDNSRecordParams {
	var ()
	return &CreateDNSRecordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateDNSRecordParamsWithTimeout creates a new CreateDNSRecordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateDNSRecordParamsWithTimeout(timeout time.Duration) *CreateDNSRecordParams {
	var ()
	return &CreateDNSRecordParams{

		timeout: timeout,
	}
}

// NewCreateDNSRecordParamsWithContext creates a new CreateDNSRecordParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateDNSRecordParamsWithContext(ctx context.Context) *CreateDNSRecordParams {
	var ()
	return &CreateDNSRecordParams{

		Context: ctx,
	}
}

// NewCreateDNSRecordParamsWithHTTPClient creates a new CreateDNSRecordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateDNSRecordParamsWithHTTPClient(client *http.Client) *CreateDNSRecordParams {
	var ()
	return &CreateDNSRecordParams{
		HTTPClient: client,
	}
}

/*CreateDNSRecordParams contains all the parameters to send to the API endpoint
for the create Dns record operation typically these are written to a http.Request
*/
type CreateDNSRecordParams struct {

	/*DNSRecord*/
	DNSRecord *models.DNSRecordCreate
	/*ZoneID*/
	ZoneID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create Dns record params
func (o *CreateDNSRecordParams) WithTimeout(timeout time.Duration) *CreateDNSRecordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create Dns record params
func (o *CreateDNSRecordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create Dns record params
func (o *CreateDNSRecordParams) WithContext(ctx context.Context) *CreateDNSRecordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create Dns record params
func (o *CreateDNSRecordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create Dns record params
func (o *CreateDNSRecordParams) WithHTTPClient(client *http.Client) *CreateDNSRecordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create Dns record params
func (o *CreateDNSRecordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDNSRecord adds the dNSRecord to the create Dns record params
func (o *CreateDNSRecordParams) WithDNSRecord(dNSRecord *models.DNSRecordCreate) *CreateDNSRecordParams {
	o.SetDNSRecord(dNSRecord)
	return o
}

// SetDNSRecord adds the dnsRecord to the create Dns record params
func (o *CreateDNSRecordParams) SetDNSRecord(dNSRecord *models.DNSRecordCreate) {
	o.DNSRecord = dNSRecord
}

// WithZoneID adds the zoneID to the create Dns record params
func (o *CreateDNSRecordParams) WithZoneID(zoneID string) *CreateDNSRecordParams {
	o.SetZoneID(zoneID)
	return o
}

// SetZoneID adds the zoneId to the create Dns record params
func (o *CreateDNSRecordParams) SetZoneID(zoneID string) {
	o.ZoneID = zoneID
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDNSRecordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DNSRecord != nil {
		if err := r.SetBodyParam(o.DNSRecord); err != nil {
			return err
		}
	}

	// path param zone_id
	if err := r.SetPathParam("zone_id", o.ZoneID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
