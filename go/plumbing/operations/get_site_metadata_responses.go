// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/open-api/v2/go/models"
)

// GetSiteMetadataReader is a Reader for the GetSiteMetadata structure.
type GetSiteMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSiteMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSiteMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetSiteMetadataDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSiteMetadataOK creates a GetSiteMetadataOK with default headers values
func NewGetSiteMetadataOK() *GetSiteMetadataOK {
	return &GetSiteMetadataOK{}
}

/*GetSiteMetadataOK handles this case with default header values.

OK
*/
type GetSiteMetadataOK struct {
	Payload models.Metadata
}

func (o *GetSiteMetadataOK) Error() string {
	return fmt.Sprintf("[GET /sites/{site_id}/metadata][%d] getSiteMetadataOK  %+v", 200, o.Payload)
}

func (o *GetSiteMetadataOK) GetPayload() models.Metadata {
	return o.Payload
}

func (o *GetSiteMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSiteMetadataDefault creates a GetSiteMetadataDefault with default headers values
func NewGetSiteMetadataDefault(code int) *GetSiteMetadataDefault {
	return &GetSiteMetadataDefault{
		_statusCode: code,
	}
}

/*GetSiteMetadataDefault handles this case with default header values.

error
*/
type GetSiteMetadataDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get site metadata default response
func (o *GetSiteMetadataDefault) Code() int {
	return o._statusCode
}

func (o *GetSiteMetadataDefault) Error() string {
	return fmt.Sprintf("[GET /sites/{site_id}/metadata][%d] getSiteMetadata default  %+v", o._statusCode, o.Payload)
}

func (o *GetSiteMetadataDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSiteMetadataDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
