// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateAgentRunnerUploadURLParams creates a new CreateAgentRunnerUploadURLParams object
// with the default values initialized.
func NewCreateAgentRunnerUploadURLParams() *CreateAgentRunnerUploadURLParams {
	var ()
	return &CreateAgentRunnerUploadURLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateAgentRunnerUploadURLParamsWithTimeout creates a new CreateAgentRunnerUploadURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateAgentRunnerUploadURLParamsWithTimeout(timeout time.Duration) *CreateAgentRunnerUploadURLParams {
	var ()
	return &CreateAgentRunnerUploadURLParams{

		timeout: timeout,
	}
}

// NewCreateAgentRunnerUploadURLParamsWithContext creates a new CreateAgentRunnerUploadURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateAgentRunnerUploadURLParamsWithContext(ctx context.Context) *CreateAgentRunnerUploadURLParams {
	var ()
	return &CreateAgentRunnerUploadURLParams{

		Context: ctx,
	}
}

// NewCreateAgentRunnerUploadURLParamsWithHTTPClient creates a new CreateAgentRunnerUploadURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateAgentRunnerUploadURLParamsWithHTTPClient(client *http.Client) *CreateAgentRunnerUploadURLParams {
	var ()
	return &CreateAgentRunnerUploadURLParams{
		HTTPClient: client,
	}
}

/*
CreateAgentRunnerUploadURLParams contains all the parameters to send to the API endpoint
for the create agent runner upload Url operation typically these are written to a http.Request
*/
type CreateAgentRunnerUploadURLParams struct {

	/*AccountID*/
	AccountID string
	/*ContentType*/
	ContentType string
	/*Filename*/
	Filename string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithTimeout(timeout time.Duration) *CreateAgentRunnerUploadURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithContext(ctx context.Context) *CreateAgentRunnerUploadURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithHTTPClient(client *http.Client) *CreateAgentRunnerUploadURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithAccountID(accountID string) *CreateAgentRunnerUploadURLParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithContentType adds the contentType to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithContentType(contentType string) *CreateAgentRunnerUploadURLParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithFilename adds the filename to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) WithFilename(filename string) *CreateAgentRunnerUploadURLParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the create agent runner upload Url params
func (o *CreateAgentRunnerUploadURLParams) SetFilename(filename string) {
	o.Filename = filename
}

// WriteToRequest writes these params to a swagger request
func (o *CreateAgentRunnerUploadURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param account_id
	qrAccountID := o.AccountID
	qAccountID := qrAccountID
	if qAccountID != "" {
		if err := r.SetQueryParam("account_id", qAccountID); err != nil {
			return err
		}
	}

	// query param content_type
	qrContentType := o.ContentType
	qContentType := qrContentType
	if qContentType != "" {
		if err := r.SetQueryParam("content_type", qContentType); err != nil {
			return err
		}
	}

	// query param filename
	qrFilename := o.Filename
	qFilename := qrFilename
	if qFilename != "" {
		if err := r.SetQueryParam("filename", qFilename); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
