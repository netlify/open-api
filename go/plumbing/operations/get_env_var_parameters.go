// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetEnvVarParams creates a new GetEnvVarParams object
// with the default values initialized.
func NewGetEnvVarParams() *GetEnvVarParams {
	var ()
	return &GetEnvVarParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEnvVarParamsWithTimeout creates a new GetEnvVarParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEnvVarParamsWithTimeout(timeout time.Duration) *GetEnvVarParams {
	var ()
	return &GetEnvVarParams{

		timeout: timeout,
	}
}

// NewGetEnvVarParamsWithContext creates a new GetEnvVarParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEnvVarParamsWithContext(ctx context.Context) *GetEnvVarParams {
	var ()
	return &GetEnvVarParams{

		Context: ctx,
	}
}

// NewGetEnvVarParamsWithHTTPClient creates a new GetEnvVarParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEnvVarParamsWithHTTPClient(client *http.Client) *GetEnvVarParams {
	var ()
	return &GetEnvVarParams{
		HTTPClient: client,
	}
}

/*GetEnvVarParams contains all the parameters to send to the API endpoint
for the get env var operation typically these are written to a http.Request
*/
type GetEnvVarParams struct {

	/*AccountID
	  Scope response to account_id

	*/
	AccountID string
	/*Key
	  The environment variable key (case-sensitive)

	*/
	Key string
	/*SiteID
	  If provided, return the environment variable for a specific site (no merging is performed)

	*/
	SiteID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get env var params
func (o *GetEnvVarParams) WithTimeout(timeout time.Duration) *GetEnvVarParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get env var params
func (o *GetEnvVarParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get env var params
func (o *GetEnvVarParams) WithContext(ctx context.Context) *GetEnvVarParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get env var params
func (o *GetEnvVarParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get env var params
func (o *GetEnvVarParams) WithHTTPClient(client *http.Client) *GetEnvVarParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get env var params
func (o *GetEnvVarParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get env var params
func (o *GetEnvVarParams) WithAccountID(accountID string) *GetEnvVarParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get env var params
func (o *GetEnvVarParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithKey adds the key to the get env var params
func (o *GetEnvVarParams) WithKey(key string) *GetEnvVarParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the get env var params
func (o *GetEnvVarParams) SetKey(key string) {
	o.Key = key
}

// WithSiteID adds the siteID to the get env var params
func (o *GetEnvVarParams) WithSiteID(siteID *string) *GetEnvVarParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get env var params
func (o *GetEnvVarParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WriteToRequest writes these params to a swagger request
func (o *GetEnvVarParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param account_id
	if err := r.SetPathParam("account_id", o.AccountID); err != nil {
		return err
	}

	// path param key
	if err := r.SetPathParam("key", o.Key); err != nil {
		return err
	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
