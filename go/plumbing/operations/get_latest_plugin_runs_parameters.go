// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLatestPluginRunsParams creates a new GetLatestPluginRunsParams object
// with the default values initialized.
func NewGetLatestPluginRunsParams() *GetLatestPluginRunsParams {
	var ()
	return &GetLatestPluginRunsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLatestPluginRunsParamsWithTimeout creates a new GetLatestPluginRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLatestPluginRunsParamsWithTimeout(timeout time.Duration) *GetLatestPluginRunsParams {
	var ()
	return &GetLatestPluginRunsParams{

		timeout: timeout,
	}
}

// NewGetLatestPluginRunsParamsWithContext creates a new GetLatestPluginRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLatestPluginRunsParamsWithContext(ctx context.Context) *GetLatestPluginRunsParams {
	var ()
	return &GetLatestPluginRunsParams{

		Context: ctx,
	}
}

// NewGetLatestPluginRunsParamsWithHTTPClient creates a new GetLatestPluginRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLatestPluginRunsParamsWithHTTPClient(client *http.Client) *GetLatestPluginRunsParams {
	var ()
	return &GetLatestPluginRunsParams{
		HTTPClient: client,
	}
}

/*GetLatestPluginRunsParams contains all the parameters to send to the API endpoint
for the get latest plugin runs operation typically these are written to a http.Request
*/
type GetLatestPluginRunsParams struct {

	/*Packages*/
	Packages []string
	/*SiteID*/
	SiteID string
	/*State*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithTimeout(timeout time.Duration) *GetLatestPluginRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithContext(ctx context.Context) *GetLatestPluginRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithHTTPClient(client *http.Client) *GetLatestPluginRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPackages adds the packages to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithPackages(packages []string) *GetLatestPluginRunsParams {
	o.SetPackages(packages)
	return o
}

// SetPackages adds the packages to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetPackages(packages []string) {
	o.Packages = packages
}

// WithSiteID adds the siteID to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithSiteID(siteID string) *GetLatestPluginRunsParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetSiteID(siteID string) {
	o.SiteID = siteID
}

// WithState adds the state to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) WithState(state *string) *GetLatestPluginRunsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get latest plugin runs params
func (o *GetLatestPluginRunsParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *GetLatestPluginRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesPackages := o.Packages

	joinedPackages := swag.JoinByFormat(valuesPackages, "")
	// query array param packages
	if err := r.SetQueryParam("packages", joinedPackages...); err != nil {
		return err
	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
