// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/netlify/open-api/v2/go/models"
)

// GetAIGatewayTokenReader is a Reader for the GetAIGatewayToken structure.
type GetAIGatewayTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAIGatewayTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAIGatewayTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetAIGatewayTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetAIGatewayTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAIGatewayTokenOK creates a GetAIGatewayTokenOK with default headers values
func NewGetAIGatewayTokenOK() *GetAIGatewayTokenOK {
	return &GetAIGatewayTokenOK{}
}

/*
GetAIGatewayTokenOK handles this case with default header values.

AI Gateway token for the site
*/
type GetAIGatewayTokenOK struct {
	Payload *models.AiGatewayToken
}

func (o *GetAIGatewayTokenOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/sites/{site_id}/ai-gateway/token][%d] getAIGatewayTokenOK  %+v", 200, o.Payload)
}

func (o *GetAIGatewayTokenOK) GetPayload() *models.AiGatewayToken {
	return o.Payload
}

func (o *GetAIGatewayTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AiGatewayToken)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAIGatewayTokenNotFound creates a GetAIGatewayTokenNotFound with default headers values
func NewGetAIGatewayTokenNotFound() *GetAIGatewayTokenNotFound {
	return &GetAIGatewayTokenNotFound{}
}

/*
GetAIGatewayTokenNotFound handles this case with default header values.

AI Gateway not available for this site
*/
type GetAIGatewayTokenNotFound struct {
}

func (o *GetAIGatewayTokenNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/sites/{site_id}/ai-gateway/token][%d] getAIGatewayTokenNotFound ", 404)
}

func (o *GetAIGatewayTokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAIGatewayTokenDefault creates a GetAIGatewayTokenDefault with default headers values
func NewGetAIGatewayTokenDefault(code int) *GetAIGatewayTokenDefault {
	return &GetAIGatewayTokenDefault{
		_statusCode: code,
	}
}

/*
GetAIGatewayTokenDefault handles this case with default header values.

error
*/
type GetAIGatewayTokenDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get a i gateway token default response
func (o *GetAIGatewayTokenDefault) Code() int {
	return o._statusCode
}

func (o *GetAIGatewayTokenDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/sites/{site_id}/ai-gateway/token][%d] getAIGatewayToken default  %+v", o._statusCode, o.Payload)
}

func (o *GetAIGatewayTokenDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAIGatewayTokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
