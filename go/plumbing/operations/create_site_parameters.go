// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/netlify/open-api/go/models"
)

// NewCreateSiteParams creates a new CreateSiteParams object
// with the default values initialized.
func NewCreateSiteParams() *CreateSiteParams {
	var ()
	return &CreateSiteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSiteParamsWithTimeout creates a new CreateSiteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateSiteParamsWithTimeout(timeout time.Duration) *CreateSiteParams {
	var ()
	return &CreateSiteParams{

		timeout: timeout,
	}
}

// NewCreateSiteParamsWithContext creates a new CreateSiteParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateSiteParamsWithContext(ctx context.Context) *CreateSiteParams {
	var ()
	return &CreateSiteParams{

		Context: ctx,
	}
}

// NewCreateSiteParamsWithHTTPClient creates a new CreateSiteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateSiteParamsWithHTTPClient(client *http.Client) *CreateSiteParams {
	var ()
	return &CreateSiteParams{
		HTTPClient: client,
	}
}

/*CreateSiteParams contains all the parameters to send to the API endpoint
for the create site operation typically these are written to a http.Request
*/
type CreateSiteParams struct {

	/*ConfigureDNS*/
	ConfigureDNS *bool
	/*Site*/
	Site *models.SiteSetup

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create site params
func (o *CreateSiteParams) WithTimeout(timeout time.Duration) *CreateSiteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create site params
func (o *CreateSiteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create site params
func (o *CreateSiteParams) WithContext(ctx context.Context) *CreateSiteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create site params
func (o *CreateSiteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create site params
func (o *CreateSiteParams) WithHTTPClient(client *http.Client) *CreateSiteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create site params
func (o *CreateSiteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConfigureDNS adds the configureDNS to the create site params
func (o *CreateSiteParams) WithConfigureDNS(configureDNS *bool) *CreateSiteParams {
	o.SetConfigureDNS(configureDNS)
	return o
}

// SetConfigureDNS adds the configureDns to the create site params
func (o *CreateSiteParams) SetConfigureDNS(configureDNS *bool) {
	o.ConfigureDNS = configureDNS
}

// WithSite adds the site to the create site params
func (o *CreateSiteParams) WithSite(site *models.SiteSetup) *CreateSiteParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the create site params
func (o *CreateSiteParams) SetSite(site *models.SiteSetup) {
	o.Site = site
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSiteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConfigureDNS != nil {

		// query param configure_dns
		var qrConfigureDNS bool
		if o.ConfigureDNS != nil {
			qrConfigureDNS = *o.ConfigureDNS
		}
		qConfigureDNS := swag.FormatBool(qrConfigureDNS)
		if qConfigureDNS != "" {
			if err := r.SetQueryParam("configure_dns", qConfigureDNS); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {
		if err := r.SetBodyParam(o.Site); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
