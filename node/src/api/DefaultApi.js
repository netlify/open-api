/**
 * Netlify's API definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessToken', 'model/AccountMembership', 'model/AccountSetup', 'model/AccountType', 'model/AccountUpdateSetup', 'model/Asset', 'model/AssetPublicSignature', 'model/AssetSignature', 'model/AuditLog', 'model/Build', 'model/BuildHook', 'model/BuildLogMsg', 'model/Deploy', 'model/DeployFiles', 'model/DeployKey', 'model/DeployedBranch', 'model/DnsZone', 'model/Error', 'model/Form', 'model/Hook', 'model/HookType', 'model/Member', 'model/Metadata', 'model/ModelFunction', 'model/PaymentMethod', 'model/Site', 'model/SiteSetup', 'model/SniCertificate', 'model/Snippet', 'model/Submission', 'model/Ticket', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessToken'), require('../model/AccountMembership'), require('../model/AccountSetup'), require('../model/AccountType'), require('../model/AccountUpdateSetup'), require('../model/Asset'), require('../model/AssetPublicSignature'), require('../model/AssetSignature'), require('../model/AuditLog'), require('../model/Build'), require('../model/BuildHook'), require('../model/BuildLogMsg'), require('../model/Deploy'), require('../model/DeployFiles'), require('../model/DeployKey'), require('../model/DeployedBranch'), require('../model/DnsZone'), require('../model/Error'), require('../model/Form'), require('../model/Hook'), require('../model/HookType'), require('../model/Member'), require('../model/Metadata'), require('../model/ModelFunction'), require('../model/PaymentMethod'), require('../model/Site'), require('../model/SiteSetup'), require('../model/SniCertificate'), require('../model/Snippet'), require('../model/Submission'), require('../model/Ticket'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.NetlifysApiDefinition) {
      root.NetlifysApiDefinition = {};
    }
    root.NetlifysApiDefinition.DefaultApi = factory(root.NetlifysApiDefinition.ApiClient, root.NetlifysApiDefinition.AccessToken, root.NetlifysApiDefinition.AccountMembership, root.NetlifysApiDefinition.AccountSetup, root.NetlifysApiDefinition.AccountType, root.NetlifysApiDefinition.AccountUpdateSetup, root.NetlifysApiDefinition.Asset, root.NetlifysApiDefinition.AssetPublicSignature, root.NetlifysApiDefinition.AssetSignature, root.NetlifysApiDefinition.AuditLog, root.NetlifysApiDefinition.Build, root.NetlifysApiDefinition.BuildHook, root.NetlifysApiDefinition.BuildLogMsg, root.NetlifysApiDefinition.Deploy, root.NetlifysApiDefinition.DeployFiles, root.NetlifysApiDefinition.DeployKey, root.NetlifysApiDefinition.DeployedBranch, root.NetlifysApiDefinition.DnsZone, root.NetlifysApiDefinition.Error, root.NetlifysApiDefinition.Form, root.NetlifysApiDefinition.Hook, root.NetlifysApiDefinition.HookType, root.NetlifysApiDefinition.Member, root.NetlifysApiDefinition.Metadata, root.NetlifysApiDefinition.ModelFunction, root.NetlifysApiDefinition.PaymentMethod, root.NetlifysApiDefinition.Site, root.NetlifysApiDefinition.SiteSetup, root.NetlifysApiDefinition.SniCertificate, root.NetlifysApiDefinition.Snippet, root.NetlifysApiDefinition.Submission, root.NetlifysApiDefinition.Ticket, root.NetlifysApiDefinition.User);
  }
}(this, function(ApiClient, AccessToken, AccountMembership, AccountSetup, AccountType, AccountUpdateSetup, Asset, AssetPublicSignature, AssetSignature, AuditLog, Build, BuildHook, BuildLogMsg, Deploy, DeployFiles, DeployKey, DeployedBranch, DnsZone, Error, Form, Hook, HookType, Member, Metadata, ModelFunction, PaymentMethod, Site, SiteSetup, SniCertificate, Snippet, Submission, Ticket, User) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.2.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addMemberToAccount operation.
     * @callback module:api/DefaultApi~addMemberToAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Member>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountSlug 
     * @param {String} email 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.role 
     * @param {module:api/DefaultApi~addMemberToAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Member>}
     */
    this.addMemberToAccount = function(accountSlug, email, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling addMemberToAccount");
      }

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling addMemberToAccount");
      }


      var pathParams = {
        'account_slug': accountSlug
      };
      var queryParams = {
        'role': opts['role'],
        'email': email,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Member];

      return this.apiClient.callApi(
        '/{account_slug}/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelAccount operation.
     * @callback module:api/DefaultApi~cancelAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountId 
     * @param {module:api/DefaultApi~cancelAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cancelAccount = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling cancelAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/accounts/{account_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the configureDNSForSite operation.
     * @callback module:api/DefaultApi~configureDNSForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~configureDNSForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsZone>}
     */
    this.configureDNSForSite = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling configureDNSForSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DnsZone];

      return this.apiClient.callApi(
        '/sites/{site_id}/dns', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccount operation.
     * @callback module:api/DefaultApi~createAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AccountSetup} accountSetup 
     * @param {module:api/DefaultApi~createAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountMembership}
     */
    this.createAccount = function(accountSetup, callback) {
      var postBody = accountSetup;

      // verify the required parameter 'accountSetup' is set
      if (accountSetup === undefined || accountSetup === null) {
        throw new Error("Missing the required parameter 'accountSetup' when calling createAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountMembership;

      return this.apiClient.callApi(
        '/accounts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeployKey operation.
     * @callback module:api/DefaultApi~createDeployKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~createDeployKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    this.createDeployKey = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeployKey;

      return this.apiClient.callApi(
        '/deploy_keys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createHookBySiteId operation.
     * @callback module:api/DefaultApi~createHookBySiteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/Hook} hook 
     * @param {module:api/DefaultApi~createHookBySiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    this.createHookBySiteId = function(siteId, hook, callback) {
      var postBody = hook;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createHookBySiteId");
      }

      // verify the required parameter 'hook' is set
      if (hook === undefined || hook === null) {
        throw new Error("Missing the required parameter 'hook' when calling createHookBySiteId");
      }


      var pathParams = {
      };
      var queryParams = {
        'site_id': siteId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Hook;

      return this.apiClient.callApi(
        '/hooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSite operation.
     * @callback module:api/DefaultApi~createSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/SiteSetup} site 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.configureDns 
     * @param {module:api/DefaultApi~createSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    this.createSite = function(site, opts, callback) {
      opts = opts || {};
      var postBody = site;

      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling createSite");
      }


      var pathParams = {
      };
      var queryParams = {
        'configure_dns': opts['configureDns'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Site;

      return this.apiClient.callApi(
        '/sites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteAsset operation.
     * @callback module:api/DefaultApi~createSiteAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} name 
     * @param {Number} size 
     * @param {String} contentType 
     * @param {Object} opts Optional parameters
     * @param {String} opts.visibility 
     * @param {module:api/DefaultApi~createSiteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetSignature}
     */
    this.createSiteAsset = function(siteId, name, size, contentType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createSiteAsset");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createSiteAsset");
      }

      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling createSiteAsset");
      }

      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling createSiteAsset");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'name': name,
        'size': size,
        'content_type': contentType,
        'visibility': opts['visibility'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetSignature;

      return this.apiClient.callApi(
        '/sites/{site_id}/assets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteBuildHook operation.
     * @callback module:api/DefaultApi~createSiteBuildHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/BuildHook} buildHook 
     * @param {module:api/DefaultApi~createSiteBuildHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildHook}
     */
    this.createSiteBuildHook = function(siteId, buildHook, callback) {
      var postBody = buildHook;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createSiteBuildHook");
      }

      // verify the required parameter 'buildHook' is set
      if (buildHook === undefined || buildHook === null) {
        throw new Error("Missing the required parameter 'buildHook' when calling createSiteBuildHook");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuildHook;

      return this.apiClient.callApi(
        '/sites/{site_id}/build_hooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteDeploy operation.
     * @callback module:api/DefaultApi~createSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/DeployFiles} deploy 
     * @param {Object} opts Optional parameters
     * @param {String} opts.title 
     * @param {module:api/DefaultApi~createSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.createSiteDeploy = function(siteId, deploy, opts, callback) {
      opts = opts || {};
      var postBody = deploy;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createSiteDeploy");
      }

      // verify the required parameter 'deploy' is set
      if (deploy === undefined || deploy === null) {
        throw new Error("Missing the required parameter 'deploy' when calling createSiteDeploy");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'title': opts['title'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/sites/{site_id}/deploys', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteInTeam operation.
     * @callback module:api/DefaultApi~createSiteInTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountSlug 
     * @param {Object} opts Optional parameters
     * @param {module:model/SiteSetup} opts.site 
     * @param {Boolean} opts.configureDns 
     * @param {module:api/DefaultApi~createSiteInTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    this.createSiteInTeam = function(accountSlug, opts, callback) {
      opts = opts || {};
      var postBody = opts['site'];

      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling createSiteInTeam");
      }


      var pathParams = {
        'account_slug': accountSlug
      };
      var queryParams = {
        'configure_dns': opts['configureDns'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Site;

      return this.apiClient.callApi(
        '/{account_slug}/sites', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteSnippet operation.
     * @callback module:api/DefaultApi~createSiteSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Snippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/Snippet} snippet 
     * @param {module:api/DefaultApi~createSiteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Snippet}
     */
    this.createSiteSnippet = function(siteId, snippet, callback) {
      var postBody = snippet;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createSiteSnippet");
      }

      // verify the required parameter 'snippet' is set
      if (snippet === undefined || snippet === null) {
        throw new Error("Missing the required parameter 'snippet' when calling createSiteSnippet");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Snippet;

      return this.apiClient.callApi(
        '/sites/{site_id}/snippets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTicket operation.
     * @callback module:api/DefaultApi~createTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientId 
     * @param {module:api/DefaultApi~createTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.createTicket = function(clientId, callback) {
      var postBody = null;

      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createTicket");
      }


      var pathParams = {
      };
      var queryParams = {
        'client_id': clientId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/oauth/tickets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeployKey operation.
     * @callback module:api/DefaultApi~deleteDeployKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyId 
     * @param {module:api/DefaultApi~deleteDeployKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDeployKey = function(keyId, callback) {
      var postBody = null;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteDeployKey");
      }


      var pathParams = {
        'key_id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/deploy_keys/{key_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHookBySiteId operation.
     * @callback module:api/DefaultApi~deleteHookBySiteIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} hookId 
     * @param {module:api/DefaultApi~deleteHookBySiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteHookBySiteId = function(hookId, callback) {
      var postBody = null;

      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling deleteHookBySiteId");
      }


      var pathParams = {
        'hook_id': hookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/hooks/{hook_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSite operation.
     * @callback module:api/DefaultApi~deleteSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~deleteSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSite = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSiteAsset operation.
     * @callback module:api/DefaultApi~deleteSiteAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} assetId 
     * @param {module:api/DefaultApi~deleteSiteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSiteAsset = function(siteId, assetId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSiteAsset");
      }

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteSiteAsset");
      }


      var pathParams = {
        'site_id': siteId,
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/assets/{asset_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSiteBuildHook operation.
     * @callback module:api/DefaultApi~deleteSiteBuildHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:api/DefaultApi~deleteSiteBuildHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSiteBuildHook = function(siteId, id, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSiteBuildHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSiteBuildHook");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/build_hooks/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSiteSnippet operation.
     * @callback module:api/DefaultApi~deleteSiteSnippetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} snippetId 
     * @param {module:api/DefaultApi~deleteSiteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSiteSnippet = function(siteId, snippetId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSiteSnippet");
      }

      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling deleteSiteSnippet");
      }


      var pathParams = {
        'site_id': siteId,
        'snippet_id': snippetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/snippets/{snippet_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSubmission operation.
     * @callback module:api/DefaultApi~deleteSubmissionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} submissionId 
     * @param {module:api/DefaultApi~deleteSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSubmission = function(submissionId, callback) {
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling deleteSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableHook operation.
     * @callback module:api/DefaultApi~enableHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} hookId 
     * @param {module:api/DefaultApi~enableHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    this.enableHook = function(hookId, callback) {
      var postBody = null;

      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling enableHook");
      }


      var pathParams = {
        'hook_id': hookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Hook;

      return this.apiClient.callApi(
        '/hooks/{hook_id}/enable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exchangeTicket operation.
     * @callback module:api/DefaultApi~exchangeTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ticketId 
     * @param {module:api/DefaultApi~exchangeTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessToken}
     */
    this.exchangeTicket = function(ticketId, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling exchangeTicket");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessToken;

      return this.apiClient.callApi(
        '/oauth/tickets/{ticket_id}/exchange', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback module:api/DefaultApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.getCurrentUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDNSForSite operation.
     * @callback module:api/DefaultApi~getDNSForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getDNSForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsZone>}
     */
    this.getDNSForSite = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getDNSForSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DnsZone];

      return this.apiClient.callApi(
        '/sites/{site_id}/dns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploy operation.
     * @callback module:api/DefaultApi~getDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DefaultApi~getDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.getDeploy = function(deployId, callback) {
      var postBody = null;

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling getDeploy");
      }


      var pathParams = {
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/deploys/{deploy_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployKey operation.
     * @callback module:api/DefaultApi~getDeployKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeployKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} keyId 
     * @param {module:api/DefaultApi~getDeployKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeployKey}
     */
    this.getDeployKey = function(keyId, callback) {
      var postBody = null;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getDeployKey");
      }


      var pathParams = {
        'key_id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeployKey;

      return this.apiClient.callApi(
        '/deploy_keys/{key_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHook operation.
     * @callback module:api/DefaultApi~getHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} hookId 
     * @param {module:api/DefaultApi~getHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    this.getHook = function(hookId, callback) {
      var postBody = null;

      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling getHook");
      }


      var pathParams = {
        'hook_id': hookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Hook;

      return this.apiClient.callApi(
        '/hooks/{hook_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSite operation.
     * @callback module:api/DefaultApi~getSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    this.getSite = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Site;

      return this.apiClient.callApi(
        '/sites/{site_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteAssetInfo operation.
     * @callback module:api/DefaultApi~getSiteAssetInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} assetId 
     * @param {module:api/DefaultApi~getSiteAssetInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.getSiteAssetInfo = function(siteId, assetId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteAssetInfo");
      }

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSiteAssetInfo");
      }


      var pathParams = {
        'site_id': siteId,
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/sites/{site_id}/assets/{asset_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteAssetPublicSignature operation.
     * @callback module:api/DefaultApi~getSiteAssetPublicSignatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetPublicSignature} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} assetId 
     * @param {module:api/DefaultApi~getSiteAssetPublicSignatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetPublicSignature}
     */
    this.getSiteAssetPublicSignature = function(siteId, assetId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteAssetPublicSignature");
      }

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSiteAssetPublicSignature");
      }


      var pathParams = {
        'site_id': siteId,
        'asset_id': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssetPublicSignature;

      return this.apiClient.callApi(
        '/sites/{site_id}/assets/{asset_id}/public_signature', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteBuild operation.
     * @callback module:api/DefaultApi~getSiteBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buildId 
     * @param {module:api/DefaultApi~getSiteBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    this.getSiteBuild = function(buildId, callback) {
      var postBody = null;

      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling getSiteBuild");
      }


      var pathParams = {
        'build_id': buildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Build;

      return this.apiClient.callApi(
        '/builds/{build_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteBuildHook operation.
     * @callback module:api/DefaultApi~getSiteBuildHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BuildHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:api/DefaultApi~getSiteBuildHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BuildHook}
     */
    this.getSiteBuildHook = function(siteId, id, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteBuildHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSiteBuildHook");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BuildHook;

      return this.apiClient.callApi(
        '/sites/{site_id}/build_hooks/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteDeploy operation.
     * @callback module:api/DefaultApi~getSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:api/DefaultApi~getSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.getSiteDeploy = function(siteId, deployId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteDeploy");
      }

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling getSiteDeploy");
      }


      var pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteFileByPathName operation.
     * @callback module:api/DefaultApi~getSiteFileByPathNameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} filePath 
     * @param {module:api/DefaultApi~getSiteFileByPathNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getSiteFileByPathName = function(siteId, filePath, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteFileByPathName");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling getSiteFileByPathName");
      }


      var pathParams = {
        'site_id': siteId,
        'file_path': filePath
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/sites/{site_id}/files/{file_path}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteMetadata operation.
     * @callback module:api/DefaultApi~getSiteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~getSiteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metadata}
     */
    this.getSiteMetadata = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteMetadata");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metadata;

      return this.apiClient.callApi(
        '/sites/{site_id}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteSnippet operation.
     * @callback module:api/DefaultApi~getSiteSnippetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Snippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} snippetId 
     * @param {module:api/DefaultApi~getSiteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Snippet}
     */
    this.getSiteSnippet = function(siteId, snippetId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteSnippet");
      }

      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getSiteSnippet");
      }


      var pathParams = {
        'site_id': siteId,
        'snippet_id': snippetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Snippet;

      return this.apiClient.callApi(
        '/sites/{site_id}/snippets/{snippet_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountAuditEvents operation.
     * @callback module:api/DefaultApi~listAccountAuditEventsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuditLog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {String} opts.logType 
     * @param {module:api/DefaultApi~listAccountAuditEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuditLog>}
     */
    this.listAccountAuditEvents = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling listAccountAuditEvents");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
        'query': opts['query'],
        'log_type': opts['logType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AuditLog];

      return this.apiClient.callApi(
        '/accounts/{account_id}/audit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountTypesForUser operation.
     * @callback module:api/DefaultApi~listAccountTypesForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~listAccountTypesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountType>}
     */
    this.listAccountTypesForUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AccountType];

      return this.apiClient.callApi(
        '/accounts/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountsForUser operation.
     * @callback module:api/DefaultApi~listAccountsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountMembership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~listAccountsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountMembership>}
     */
    this.listAccountsForUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AccountMembership];

      return this.apiClient.callApi(
        '/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeployKeys operation.
     * @callback module:api/DefaultApi~listDeployKeysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~listDeployKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployKey>}
     */
    this.listDeployKeys = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DeployKey];

      return this.apiClient.callApi(
        '/deploy_keys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFormSubmission operation.
     * @callback module:api/DefaultApi~listFormSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Submission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} submissionId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.query 
     * @param {module:api/DefaultApi~listFormSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Submission>}
     */
    this.listFormSubmission = function(submissionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'submissionId' is set
      if (submissionId === undefined || submissionId === null) {
        throw new Error("Missing the required parameter 'submissionId' when calling listFormSubmission");
      }


      var pathParams = {
        'submission_id': submissionId
      };
      var queryParams = {
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submission];

      return this.apiClient.callApi(
        '/submissions/{submission_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listFormSubmissions operation.
     * @callback module:api/DefaultApi~listFormSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Submission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} formId 
     * @param {module:api/DefaultApi~listFormSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Submission>}
     */
    this.listFormSubmissions = function(formId, callback) {
      var postBody = null;

      // verify the required parameter 'formId' is set
      if (formId === undefined || formId === null) {
        throw new Error("Missing the required parameter 'formId' when calling listFormSubmissions");
      }


      var pathParams = {
        'form_id': formId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submission];

      return this.apiClient.callApi(
        '/forms/{form_id}/submissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listForms operation.
     * @callback module:api/DefaultApi~listFormsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Form>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.siteId 
     * @param {module:api/DefaultApi~listFormsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Form>}
     */
    this.listForms = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'site_id': opts['siteId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Form];

      return this.apiClient.callApi(
        '/forms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listHookTypes operation.
     * @callback module:api/DefaultApi~listHookTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HookType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~listHookTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HookType>}
     */
    this.listHookTypes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [HookType];

      return this.apiClient.callApi(
        '/hooks/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listHooksBySiteId operation.
     * @callback module:api/DefaultApi~listHooksBySiteIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Hook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listHooksBySiteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Hook>}
     */
    this.listHooksBySiteId = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listHooksBySiteId");
      }


      var pathParams = {
      };
      var queryParams = {
        'site_id': siteId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Hook];

      return this.apiClient.callApi(
        '/hooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listMembersForAccount operation.
     * @callback module:api/DefaultApi~listMembersForAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Member>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountSlug 
     * @param {module:api/DefaultApi~listMembersForAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Member>}
     */
    this.listMembersForAccount = function(accountSlug, callback) {
      var postBody = null;

      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling listMembersForAccount");
      }


      var pathParams = {
        'account_slug': accountSlug
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Member];

      return this.apiClient.callApi(
        '/{account_slug}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listPaymentMethodsForUser operation.
     * @callback module:api/DefaultApi~listPaymentMethodsForUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentMethod>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~listPaymentMethodsForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PaymentMethod>}
     */
    this.listPaymentMethodsForUser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PaymentMethod];

      return this.apiClient.callApi(
        '/billing/payment_methods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteAssets operation.
     * @callback module:api/DefaultApi~listSiteAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Asset>}
     */
    this.listSiteAssets = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteAssets");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Asset];

      return this.apiClient.callApi(
        '/sites/{site_id}/assets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteBuildHooks operation.
     * @callback module:api/DefaultApi~listSiteBuildHooksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BuildHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteBuildHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BuildHook>}
     */
    this.listSiteBuildHooks = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteBuildHooks");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BuildHook];

      return this.apiClient.callApi(
        '/sites/{site_id}/build_hooks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteBuilds operation.
     * @callback module:api/DefaultApi~listSiteBuildsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Build>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Build>}
     */
    this.listSiteBuilds = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteBuilds");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Build];

      return this.apiClient.callApi(
        '/sites/{site_id}/builds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteDeployedBranches operation.
     * @callback module:api/DefaultApi~listSiteDeployedBranchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeployedBranch>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteDeployedBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeployedBranch>}
     */
    this.listSiteDeployedBranches = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteDeployedBranches");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DeployedBranch];

      return this.apiClient.callApi(
        '/sites/{site_id}/deployed-branches', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteDeploys operation.
     * @callback module:api/DefaultApi~listSiteDeploysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deploy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteDeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deploy>}
     */
    this.listSiteDeploys = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteDeploys");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Deploy];

      return this.apiClient.callApi(
        '/sites/{site_id}/deploys', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteFiles operation.
     * @callback module:api/DefaultApi~listSiteFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<File>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<File>}
     */
    this.listSiteFiles = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteFiles");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [File];

      return this.apiClient.callApi(
        '/sites/{site_id}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteForms operation.
     * @callback module:api/DefaultApi~listSiteFormsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Form>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteFormsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Form>}
     */
    this.listSiteForms = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteForms");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Form];

      return this.apiClient.callApi(
        '/sites/{site_id}/forms', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteSnippets operation.
     * @callback module:api/DefaultApi~listSiteSnippetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Snippet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteSnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Snippet>}
     */
    this.listSiteSnippets = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteSnippets");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Snippet];

      return this.apiClient.callApi(
        '/sites/{site_id}/snippets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteSubmissions operation.
     * @callback module:api/DefaultApi~listSiteSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Submission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~listSiteSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Submission>}
     */
    this.listSiteSubmissions = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteSubmissions");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Submission];

      return this.apiClient.callApi(
        '/sites/{site_id}/submissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSites operation.
     * @callback module:api/DefaultApi~listSitesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Site>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:model/String} opts.filter 
     * @param {module:api/DefaultApi~listSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Site>}
     */
    this.listSites = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'filter': opts['filter'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Site];

      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listSitesForAccount operation.
     * @callback module:api/DefaultApi~listSitesForAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Site>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountSlug 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {module:api/DefaultApi~listSitesForAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Site>}
     */
    this.listSitesForAccount = function(accountSlug, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling listSitesForAccount");
      }


      var pathParams = {
        'account_slug': accountSlug
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Site];

      return this.apiClient.callApi(
        '/{account_slug}/sites', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lockDeploy operation.
     * @callback module:api/DefaultApi~lockDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DefaultApi~lockDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.lockDeploy = function(deployId, callback) {
      var postBody = null;

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling lockDeploy");
      }


      var pathParams = {
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/deploys/{deploy_id}/lock', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyBuildStart operation.
     * @callback module:api/DefaultApi~notifyBuildStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buildId 
     * @param {module:api/DefaultApi~notifyBuildStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.notifyBuildStart = function(buildId, callback) {
      var postBody = null;

      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling notifyBuildStart");
      }


      var pathParams = {
        'build_id': buildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/builds/{build_id}/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionSiteTLSCertificate operation.
     * @callback module:api/DefaultApi~provisionSiteTLSCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SniCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.certificate 
     * @param {String} opts.key 
     * @param {String} opts.caCertificates 
     * @param {module:api/DefaultApi~provisionSiteTLSCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SniCertificate}
     */
    this.provisionSiteTLSCertificate = function(siteId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling provisionSiteTLSCertificate");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
        'certificate': opts['certificate'],
        'key': opts['key'],
        'ca_certificates': opts['caCertificates'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SniCertificate;

      return this.apiClient.callApi(
        '/sites/{site_id}/ssl', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreSiteDeploy operation.
     * @callback module:api/DefaultApi~restoreSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:api/DefaultApi~restoreSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.restoreSiteDeploy = function(siteId, deployId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling restoreSiteDeploy");
      }

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling restoreSiteDeploy");
      }


      var pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the showSiteTLSCertificate operation.
     * @callback module:api/DefaultApi~showSiteTLSCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SniCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DefaultApi~showSiteTLSCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SniCertificate}
     */
    this.showSiteTLSCertificate = function(siteId, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling showSiteTLSCertificate");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SniCertificate;

      return this.apiClient.callApi(
        '/sites/{site_id}/ssl', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the showTicket operation.
     * @callback module:api/DefaultApi~showTicketCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ticketId 
     * @param {module:api/DefaultApi~showTicketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.showTicket = function(ticketId, callback) {
      var postBody = null;

      // verify the required parameter 'ticketId' is set
      if (ticketId === undefined || ticketId === null) {
        throw new Error("Missing the required parameter 'ticketId' when calling showTicket");
      }


      var pathParams = {
        'ticket_id': ticketId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/oauth/tickets/{ticket_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockDeploy operation.
     * @callback module:api/DefaultApi~unlockDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DefaultApi~unlockDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.unlockDeploy = function(deployId, callback) {
      var postBody = null;

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling unlockDeploy");
      }


      var pathParams = {
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/deploys/{deploy_id}/unlock', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/DefaultApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountMembership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} accountId 
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdateSetup} opts.accountUpdateSetup 
     * @param {module:api/DefaultApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountMembership}
     */
    this.updateAccount = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = opts['accountUpdateSetup'];

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling updateAccount");
      }


      var pathParams = {
        'account_id': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccountMembership;

      return this.apiClient.callApi(
        '/accounts/{account_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHook operation.
     * @callback module:api/DefaultApi~updateHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Hook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} hookId 
     * @param {module:model/Hook} hook 
     * @param {module:api/DefaultApi~updateHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Hook}
     */
    this.updateHook = function(hookId, hook, callback) {
      var postBody = hook;

      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling updateHook");
      }

      // verify the required parameter 'hook' is set
      if (hook === undefined || hook === null) {
        throw new Error("Missing the required parameter 'hook' when calling updateHook");
      }


      var pathParams = {
        'hook_id': hookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Hook;

      return this.apiClient.callApi(
        '/hooks/{hook_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSite operation.
     * @callback module:api/DefaultApi~updateSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/SiteSetup} site 
     * @param {module:api/DefaultApi~updateSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    this.updateSite = function(siteId, site, callback) {
      var postBody = site;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSite");
      }

      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling updateSite");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Site;

      return this.apiClient.callApi(
        '/sites/{site_id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteAsset operation.
     * @callback module:api/DefaultApi~updateSiteAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} assetId 
     * @param {String} state 
     * @param {module:api/DefaultApi~updateSiteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.updateSiteAsset = function(siteId, assetId, state, callback) {
      var postBody = null;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteAsset");
      }

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling updateSiteAsset");
      }

      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling updateSiteAsset");
      }


      var pathParams = {
        'site_id': siteId,
        'asset_id': assetId
      };
      var queryParams = {
        'state': state,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/sites/{site_id}/assets/{asset_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteBuildHook operation.
     * @callback module:api/DefaultApi~updateSiteBuildHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} id 
     * @param {module:model/BuildHook} buildHook 
     * @param {module:api/DefaultApi~updateSiteBuildHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSiteBuildHook = function(siteId, id, buildHook, callback) {
      var postBody = buildHook;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteBuildHook");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSiteBuildHook");
      }

      // verify the required parameter 'buildHook' is set
      if (buildHook === undefined || buildHook === null) {
        throw new Error("Missing the required parameter 'buildHook' when calling updateSiteBuildHook");
      }


      var pathParams = {
        'site_id': siteId,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/build_hooks/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteBuildLog operation.
     * @callback module:api/DefaultApi~updateSiteBuildLogCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} buildId 
     * @param {module:model/BuildLogMsg} msg 
     * @param {module:api/DefaultApi~updateSiteBuildLogCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSiteBuildLog = function(buildId, msg, callback) {
      var postBody = msg;

      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling updateSiteBuildLog");
      }

      // verify the required parameter 'msg' is set
      if (msg === undefined || msg === null) {
        throw new Error("Missing the required parameter 'msg' when calling updateSiteBuildLog");
      }


      var pathParams = {
        'build_id': buildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/builds/{build_id}/log', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteDeploy operation.
     * @callback module:api/DefaultApi~updateSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:model/DeployFiles} deploy 
     * @param {module:api/DefaultApi~updateSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    this.updateSiteDeploy = function(siteId, deployId, deploy, callback) {
      var postBody = deploy;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteDeploy");
      }

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling updateSiteDeploy");
      }

      // verify the required parameter 'deploy' is set
      if (deploy === undefined || deploy === null) {
        throw new Error("Missing the required parameter 'deploy' when calling updateSiteDeploy");
      }


      var pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Deploy;

      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteMetadata operation.
     * @callback module:api/DefaultApi~updateSiteMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/Metadata} metadata 
     * @param {module:api/DefaultApi~updateSiteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSiteMetadata = function(siteId, metadata, callback) {
      var postBody = metadata;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteMetadata");
      }

      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling updateSiteMetadata");
      }


      var pathParams = {
        'site_id': siteId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/metadata', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteSnippet operation.
     * @callback module:api/DefaultApi~updateSiteSnippetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} snippetId 
     * @param {module:model/Snippet} snippet 
     * @param {module:api/DefaultApi~updateSiteSnippetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSiteSnippet = function(siteId, snippetId, snippet, callback) {
      var postBody = snippet;

      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteSnippet");
      }

      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling updateSiteSnippet");
      }

      // verify the required parameter 'snippet' is set
      if (snippet === undefined || snippet === null) {
        throw new Error("Missing the required parameter 'snippet' when calling updateSiteSnippet");
      }


      var pathParams = {
        'site_id': siteId,
        'snippet_id': snippetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sites/{site_id}/snippets/{snippet_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDeployFile operation.
     * @callback module:api/DefaultApi~uploadDeployFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {String} path 
     * @param {Blob} fileBody 
     * @param {module:api/DefaultApi~uploadDeployFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.uploadDeployFile = function(deployId, path, fileBody, callback) {
      var postBody = fileBody;

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling uploadDeployFile");
      }

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling uploadDeployFile");
      }

      // verify the required parameter 'fileBody' is set
      if (fileBody === undefined || fileBody === null) {
        throw new Error("Missing the required parameter 'fileBody' when calling uploadDeployFile");
      }


      var pathParams = {
        'deploy_id': deployId,
        'path': path
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/deploys/{deploy_id}/files/{path}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadDeployFunction operation.
     * @callback module:api/DefaultApi~uploadDeployFunctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelFunction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {String} name 
     * @param {Blob} fileBody 
     * @param {Object} opts Optional parameters
     * @param {String} opts.runtime 
     * @param {module:api/DefaultApi~uploadDeployFunctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelFunction}
     */
    this.uploadDeployFunction = function(deployId, name, fileBody, opts, callback) {
      opts = opts || {};
      var postBody = fileBody;

      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling uploadDeployFunction");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling uploadDeployFunction");
      }

      // verify the required parameter 'fileBody' is set
      if (fileBody === undefined || fileBody === null) {
        throw new Error("Missing the required parameter 'fileBody' when calling uploadDeployFunction");
      }


      var pathParams = {
        'deploy_id': deployId,
        'name': name
      };
      var queryParams = {
        'runtime': opts['runtime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['netlifyAuth'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = ModelFunction;

      return this.apiClient.callApi(
        '/deploys/{deploy_id}/functions/{name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
