/**
 * Netlify's API definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDefinition);
  }
}(this, function(expect, NetlifysApiDefinition) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDefinition.Site();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Site', function() {
    it('should create an instance of Site', function() {
      // uncomment below and update the code to test Site
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be.a(NetlifysApiDefinition.Site);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "custom_domain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property domainAliases (base name: "domain_aliases")', function() {
      // uncomment below and update the code to test the property domainAliases
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property notificationEmail (base name: "notification_email")', function() {
      // uncomment below and update the code to test the property notificationEmail
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property sslUrl (base name: "ssl_url")', function() {
      // uncomment below and update the code to test the property sslUrl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property adminUrl (base name: "admin_url")', function() {
      // uncomment below and update the code to test the property adminUrl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property screenshotUrl (base name: "screenshot_url")', function() {
      // uncomment below and update the code to test the property screenshotUrl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "session_id")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property ssl (base name: "ssl")', function() {
      // uncomment below and update the code to test the property ssl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property forceSsl (base name: "force_ssl")', function() {
      // uncomment below and update the code to test the property forceSsl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property managedDns (base name: "managed_dns")', function() {
      // uncomment below and update the code to test the property managedDns
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property deployUrl (base name: "deploy_url")', function() {
      // uncomment below and update the code to test the property deployUrl
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property publishedDeploy (base name: "published_deploy")', function() {
      // uncomment below and update the code to test the property publishedDeploy
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property accountName (base name: "account_name")', function() {
      // uncomment below and update the code to test the property accountName
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property accountSlug (base name: "account_slug")', function() {
      // uncomment below and update the code to test the property accountSlug
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property gitProvider (base name: "git_provider")', function() {
      // uncomment below and update the code to test the property gitProvider
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property deployHook (base name: "deploy_hook")', function() {
      // uncomment below and update the code to test the property deployHook
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property processingSettings (base name: "processing_settings")', function() {
      // uncomment below and update the code to test the property processingSettings
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

    it('should have the property buildSettings (base name: "build_settings")', function() {
      // uncomment below and update the code to test the property buildSettings
      //var instane = new NetlifysApiDefinition.Site();
      //expect(instance).to.be();
    });

  });

}));
